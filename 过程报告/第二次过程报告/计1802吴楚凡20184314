# 				编译原理课程设计阶段报告二 

### 																			计算机1802 吴楚凡 20184314

1. 上次报告后我的工作与进展

   - 定义了中间代码生成和目标代码生成中间的接口（因为小组合作形式的原因显得较晚）。
   - 对符号表总表进行了封装，保证了接口的稳定以及使用的简便。
   - 对不需要的功能进行了整理，打算在合并调试时进行删除。
   - 居中协调，保证工作进展顺利。
   - 进行了目标代码生成功能的设计与实现

2. 工作细节

   1. 对符号表的封装和对接口的定义。建立了TotalList类型（符号表总表的总表），有多个符号表总表对象，分别为存储全局变量的符号表和储存各函数变量的符号表总表。存储全局变量的符号表包含着定义的所有全局变量。每个函数的符号表总表包含着该函数全部的参数、变量和一个函数表，每个函数表包含一个用于存储代码四元式的四元式数组对象和一个用于存储参数的参数表。输出时先将全局变量输出，再将每个函数按照变量、代码的形式输出。这样的好处是：根据我们选择的文法，只需要在目标代码生成子函数的过程中加入将所有变量压栈弹栈的命令，就能保证对现场的保护和还原。

      主表类：

      `class Totallist
      {
      private:
          MainTable Var;
          MainTable Fuc[100];
      public:
          Totallist();
          void addGlobalVar(string id,TypeList *newType,Cat newCat);//增加变量
          void addIdenfer(string id,TypeList *newType,Cat newCat,int order);//增加标识符（变量）
          void setFuc(int Level,int Off,int Fn,int order);//设置函数那啥
          void setEntry(string a,string b,string c,string d,int order);//需要整合四元式表 输入四元式表 不懂问焯奇（因为我也不懂）
          void addPara(string id,TypeList *newType,Cat newCat,int order);//增加参数
          void addPara(int orderM,int orderT);//增加参数 用序号 如<I,9>为参数则 addPara(9);
          ParameterTable* retParaList(int order);//返回参数
          //CodeList *retCodeList();//返回代码
          void showTable(int order);//输出所有已经赋值的表
          void outputMT();
      };`

   2. 目标代码生成部分。包括寄存器类、符号表类（只需要记录变量名和类型的简化变量）、和总控程序类共1029行，基本完成了对多个函数的汇编语言翻译（细节仍有待打磨：如将部分虚拟机使用的伪代码替换为汇编语言使用的伪代码，完善对不同类型数据的处理，加入其他功能等）。由于是独立完成且时间较为紧张，虽然进度不慢，但是代码显得杂乱、难懂。

      目标代码生成使用的符号表类：

      `class symbolList
      {
      public:
          symbolList();
          void setIsActive();
          void addglobalvar(string newId,char newChar,Cat newCat);
          void addSymbol(string newId,char newChar,Cat newCat);
          void reclear();
          void showSymbolList();
          int getsize();
          int getIsActive(string obj,int type,int q);
          char gettype(string obj);
      private:
          string Id[200];
          char type[200];
          Cat aCat[200];
          int isActive[200];
          int globalvarNum;
          int symbolListLength;
      };`

      寄存器类：

      `class RDL
      {
      public:
          RDL();
          string getdata(int i);
          int locr(string object);
          int getAvailable();
          int getAvailableNum();
          int getRegNum();
          int getisactive(int i);
          void setReg(string object,int isActive,int i);
          void clearReg(int place);
          void showReg();
      private:
          int regNum;
          string REG[4];
          int isactive[4];
      };`

      总控程序类：

      `class finalstep
      {
      public:
          finalstep();
          bool getSeg();//获取一段基本块 若遇到while for dowhile if else return则结束获取 bool型是因为需要确认是否取到下个代码段
          void transSeg();//转换基本块内四元式为目标代码。
          void mainControl();
          //主要函数
          void setIsActive();//生成活跃信息
          bool getNext();//获取下一个四元式 并判断是否为基本块末尾 返回是（1）或不是（0）。
          bool transfuc();//获取下一个函数的变量和所有四元式
          void transCode();//处理当前四元式并生成目标代码
          void addToObj(string a,string b,string c,string d);
          //辅助函数
          void returnSentence();
          void setVarSentence();
          void ifSentence();
          void elseSentence();
          void ieSentence();
          void whileSentence();
          void doSentence();
          void weSentence();
          void addSentence();
          void subSentence();
          void mulSentence();
          void divSentence();
          void storeAll();
          void showobj();
          void showvar();
          void showfourac();
          void showseg();
          void fileoutput();
          //对不同语句的转化函数
      private:
          int pointer;
          int objpointer;
          int midpointer;
          int vsn;
          int fournum;
          int sem[100][2];
          int semtop;
          int isActive[1000][4];
          char vartype[100];
          symbolList sList;
          RDL rList;
          string fucname;
          string regname[4];
          string four[1000][4];
          string obj[1000][4];
          string varstored[100];
          ifstream Midcode;
          ofstream finalcode;
          //符号表 symbollist id，类型，种类，活跃信息
          //寄存器描述表 rdl 寄存器状态，
          //寻址函数 locr 若在寄存器内未找到 则在内存中
      };`

3. 工作总结归纳与得到的经验

   1. 在这次课设的过程中，明显感觉到了紧迫感，所以在没有详细设计过每个环节就匆匆开始了实现步骤，导致产生了很多不需要的功能与步骤。
   2. 由于之前的课程设计都没有提前定下接口，导致犯下了多个人进行同一步骤的错误，也许在一个配合默契的团队内这样的方式能提高效率，但是我们明显由于协调缺失而浪费了更多的时间，反而不如定下接口然后分配工作来的有效率。
